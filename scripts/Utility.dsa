/**********************************************************************

This script is provided as a hopefully useful utility for Daz script
developers and general users.  It based in part on existing Daz Script
Documentation (see http://www.daz3d.com), the licensing text of which
is included below and for which the same terms apply for this script
as well:

The contents of this script, and\or any portion thereof, may only be used
in accordance with the following license:

Creative Commons Attribution 3.0 Unported (CC BY 3.0)
- http://creativecommons.org/licenses/by/3.0


**********************************************************************/

// Initialize 'static' variables that hold modifier key state
var s_bShiftPressed = false;
var s_bControlPressed = false;
var s_bAltPressed = false;
var s_bMetaPressed = false;
var o_arg_map = {}


function initArgMap() 
{
    var key;
    var value;
    for (var n = 0; n < App.scriptArgs.length; n++) {
        arg=App.scriptArgs[n];
        kvpair=arg.split("=")
        if (kvpair.length > 1) {
            key=kvpair[0];
            value = kvpair[1];
        } else {
            key=kvpair;
            value = '';
        }
        o_arg_map[key] = value;
        App.verbose("++++ Adding arg mapping [" + key + "] = [" + value + "]");
    }
}

function getMappedArg(key, default_value) {
    if (o_arg_map.hasOwnProperty(key)) {
        return o_arg_map[key];
    } else {
        return default_value;
    }
}

function getBaseName(fullpath) {
    finfo = DzFileInfo(fullpath);
    basename = finfo.completeBaseName();
    return basename;
}

function setRotation(x, y, z) {
    var oNode = Scene.getPrimarySelection();
    if (oNode) {
	oNode.findPropertyByLabel("X Rotate", true).setValue(x);
	oNode.findPropertyByLabel("Y Rotate", true).setValue(y);
	oNode.findPropertyByLabel("Z Rotate", true).setValue(z);
    }
}

function resetRotation() {
    setRotation(0, 0, 0);
}

function restorePose() {
    var mgr = MainWindow.getActionMgr();
    var func = mgr.findAction("DzMemorizeFigurePoseAction")
    if (!func) {
	return;
    }
    func.trigger();
    func = mgr.findAction("DzRestoreFigurePoseAction")
    if (!func) {
	return;
    }
    func.trigger();
    resetRotation();
}


//
// void : A function for updating the keyboard modifier state
//
function updateModifierKeyState() {
    // Get the current modifier key state
    var nModifierState = App.modifierKeyState();
    // Update variables that hold modifier key state
    s_bShiftPressed = (nModifierState & 0x02000000) != 0;
    s_bControlPressed = (nModifierState & 0x04000000) != 0;
    s_bAltPressed = (nModifierState & 0x08000000) != 0;
    s_bMetaPressed = (nModifierState & 0x10000000) != 0;
};

//
// void : A function for printing only if debugging
//
function debug() {
    // If we are not debugging
    if (!s_bAltPressed) {
	// We are done...
	return;
    }

    // Convert the arguments object into an array
    var aArguments = [].slice.call(arguments);

    // Print the array
    print(aArguments.join(" "));
};

//
// String : A function for retrieving a translation if one exists
//
function text(sText) {
    // If the version of the application supports qsTr()
    if (typeof (qsTr) != "undefined") {
	// Return the translated (if any) text
	return qsTr(sText);
    }

    // Return the original text
    return sText;
};

//
// void : A function for setting the default options
//
function setDefaultOptions(oSettings) {
    // Set the initial state of the compress file checkbox
    oSettings.setBoolValue("CompressOutput", false);
};

//
// void : A function for setting the required options
//
function setRequiredOptions(oSettings, bShowOptions) {
    // Set the initial state of the compress file checkbox
    oSettings.setBoolValue("CompressOutput", false);

    // Do not to show the options
    oSettings.setBoolValue("RunSilent", !bShowOptions);
};


//
// Object: Get the file path and base path for the next numerically named file in the camera roll.
//         The name of the file is the netx number in the sequence for a given date directory,
//         and is computed counting the number of files in the date directory and adding 1.
//
function getNextSequenceFilePath(sOutputBasePath, sPrefix) {
    // Get the content manager
    //var oContentMgr = App.getContentMgr();

    // Get the base path - the first mapped content directory
    //var sBasePath = oContentMgr.getContentDirectoryPath( 0 );

    if (sPrefix == null) {
	sPrefix = "";
    }
    
    var sBasePath = sOutputBasePath;

    var oDate = new Date()

    var year = oDate.getFullYear();
    var month = oDate.getMonth()+1;
    var day = oDate.getDate();

    sMonth = "" + month;
    if (month < 10) {
	sMonth = "0" + month;
    }
    sDay = "" + day;
    if (day < 10) {
	sDay = "0" + day;
    }
    var sSubPath = "" + year + sMonth + sDay;
    var sFullPath = String("%1/%2").arg(sBasePath).arg(sSubPath)

    var ext = ["*.duf"];
    var oBaseDir = new DzDir(sFullPath);
    var aFiles = oBaseDir.getFilesFromDir(["*.duf"], false);
    var sSequenceNumber = (aFiles.length + 1).toString();
    var sFile = String("%1/%2%3").arg(sFullPath).arg(sPrefix).arg(sSequenceNumber);

    return [sFile, sFullPath, sSubPath, sSequenceNumber];
}


function getRootNodes() {
	    
    var aAllNodes = Scene.getNodeList();
    var aRootNodes = []
    
    for (var n = 0; n < aAllNodes.length; n++) {
	oNode = aAllNodes[n];
	if (oNode.isRootNode()) {
	    aRootNodes.push(oNode);
	}
    }
    return aRootNodes;
}

//
// void: Render the current scene to a file on disk with the
// subdirectory by date and file name by incrementing sequence number
// OR the file hint if provided.
//
function execLocalRender(oRenderMgr, sOutputBasePath, sFileHint) {
    // Render the image using the existing render options
    var oRenderer = oRenderMgr.getActiveRenderer();
    // If we did not find a renderer
    if (!oRenderer) {
        // Inform the user
        MessageBox.critical(text("An active renderer could not be found."),
                    text("Resource Error"), text("&OK"));

        // We are done...
        return False;
    }

    var sFile;

    if (sFileHint != null) {
	sFile = sFileHint;
    } else {
	var oFileData = getNextSequenceFilePath(sOutputBasePath);
	sFile = oFileData[0];
    }

    // Set the render options for the icon render
    oRenderOptions = oRenderMgr.getRenderOptions();
    oRenderOptions.isCurrentFrameRender = true;
    oRenderOptions.renderImgToId = DzRenderOptions.DirectToFile;
    oRenderOptions.isAspectConstrained = true;
    oRenderOptions.renderImgFilename = sFile + ".png";

    return oRenderMgr.doRender(oRenderOptions);
}


//
// void: Write the current scene to disk in the camera roll directory, 
//       with a subdirectory by date and file name by incrementing 
//       sequence number.
//
function writeSceneFile(oAssetIOMgr,
			sClassName,
			sOutputBasePath,
			sFileHint)
{

    var sPrefix = "";

    print (".... sClassName = [" + sClassName + "]");
    print (".... compare = [" + (sClassName == "DzPoseAssetFilter") + "]");
    
    if (sClassName == "DzSceneAssetFilter") {
	var sPrefix = "scene_";	       	
	var current = Scene.getFilename();
	if (current != "") {
	    var check = DzFileInfo(current);
	    var check_file = check.fileName();
	    var postindex = check_file.lastIndexOf(".");

	    if (postindex != -1) {
		check_file = check_file.substring(0, postindex);
	    }
	    var preindex = check_file.indexOf("_");
	    if (preindex != -1) {
		check_file = check_file.substring(0, preindex+1);
	    }

	    sPrefix = check_file + "_";
	}
    } else if (sClassName == "DzPoseAssetFilter") {
	var sPrefix = "pose_";
    } else {
	var sPrefix = "ext_";
    }

    // Find the index of the asset filter with the class name we want
    var nAssetIOFilter = oAssetIOMgr.findFilter(sClassName);
    // If we did not find an asset filter with the class name we wanted
    if (nAssetIOFilter < 0) {
	// Inform the user
	MessageBox.critical(text("An asset filter with the class name " +
				 "\"%1\" could not be found.").arg(sClassName),
			    text("Critical Error"), text("&OK"));

	// We are done...
	return;
    }

    // Get the asset filter at the prescribed index
    var oAssetIOFilter = oAssetIOMgr.getFilter(nAssetIOFilter);
    // If we do not have a valid asset filter
    if (!oAssetIOFilter) {
	// Inform the user
	MessageBox.critical(text("An asset filter with the class name " +
				 "\"%1\" could not be found.").arg(sClassName),
			    text("Critical Error"), text("&OK"));

	// We are done...
	return;
    }

    // Create a settings object
    var oSettings = new DzFileIOSettings();

    // Get the default settings
    oAssetIOFilter.getDefaultOptions(oSettings);

    // Define whether or not to show options; 4.20.0.7+
    var bShowOptions = App.version64 >= 0x0004001400000007 ? s_bControlPressed : false;
    var bOptionsShown = false;

    var oFileData = getNextSequenceFilePath(sOutputBasePath, sPrefix);
    var sFile = oFileData[0]
    var sBasePath = oFileData[1]

    if (sFileHint != null) {
	sFile = sFileHint;
    }
    
    print ("_________ OFD = " + oFileData);
    print ("_________  F  = " + sFile);
    print ("_________ BP  = " + sBasePath);
    print ("_________ OBP = " + sOutputBasePath);
    print ("_________ FH  = " + sFileHint);

    print ("Writing Scene File: sFile = " + sFile + "; sBasePath=" + sBasePath);

    // Set the default options; this can be used to set
    // options before the dialog is displayed
    setDefaultOptions(oSettings);

    // Debug
    debug("Defaults:", oSettings.toJsonString());

    // If we are showing options, we can override the last saved state
    // by passing in the settings we want to override;
    // if we cannot get the default/saved options for the asset filter,
    // without displaying the options dialog
    if (!oAssetIOFilter.getOptions(oSettings, bShowOptions, "")) {
	// We are done...
	return;
	// If we can get the options for the importer
    } else {
	// Capture that options were shown
	bOptionsShown = true;

	// Debug
	debug("Get:", oSettings.toJsonString());
    }


    // Set the required options; override user settings if needed
    setRequiredOptions(oSettings, !bOptionsShown);

    // Debug
    debug("Required:", oSettings.toJsonString());


    // Use the asset manager to save a file, using the filter and defined settings
    var oError = oAssetIOMgr.doSaveWithOptions(oAssetIOFilter, oSettings,
					       false, sFile, sBasePath, "");


    // If there was no error
    if (oError.valueOf() == 0x00000000) {
	// Debug
	print("Saved:", sFile);
	// If there was an error
    } else {
	// Debug
	print("Error:", getErrorMessage(oError));
    }

    // Clean up; do not leak memory
    oAssetIOFilter.deleteLater();


    // We can either send the file to an iRay renderer, render it locally, or not render it
    // at all depending on the configuration.

    return oFileData;
}

function flipNodeVisibility(startNode) {
    var bNewVisibility = !startNode.isVisible();
    setNodeVisibility(startNode, bNewVisibility)
}

function setNodeVisibility(startNode, bNewVisibility) {
    var nodes = [startNode];
    nodes = nodes.concat(startNode.getNodeChildren(true));
    
    for (var n = 0; n < nodes.length; n++) {
	nodes[n].setVisible(bNewVisibility);
    }
}

function readFile(sFileName) {
    var oFileRef = new DzFile(sFileName);
    var sFileContent = null;
    
    if (oFileRef.open(DzFile.ReadOnly) == true) {
	sFileContent = oFileRef.read();
	oFileRef.close();
    }

    return sFileContent;
}

function sendToBridgeQueue(sJobName, sExtension, oCamera, oRenderer, oRenderOptions, nPriority) {
    var message = null;
    var oResponse = oRenderer.exportRenderToBridgeQueue( 
        sJobName,
        sExtension,
        oCamera,
        oRenderOptions,
        nPriority 
    );
    
    // Declare working variable
    var sMessage;
    
    // If we have an error message member
    if( oResponse.hasOwnProperty( "errorMsg" ) ){
        // Get the error message
        sMessage = oResponse[ "errorMsg" ];
	
        // If we have an error message
        if( !sMessage.isEmpty() ){
            message = 'IRSB: NVIDIA Iray Bridge Error: ' + text(sMessage)
        }
    }
    return message
}



