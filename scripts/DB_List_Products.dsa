/**********************************************************************
 
	This script is provided as part of the Daz Script Documentation. The
	contents of this script, and\or any portion thereof, may only be used
	in accordance with the following license:
 
	Creative Commons Attribution 3.0 Unported (CC BY 3.0)
	- http://creativecommons.org/licenses/by/3.0
 
	To contact Daz 3D or for more information about Daz Script visit the
	Daz 3D website:
 
	- http://www.daz3d.com
 
**********************************************************************/
// Source: http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/samples/metadata/list_products/start



includeDir_oFILE = new DzFile( getScriptFileName() );
include( includeDir_oFILE.path()+'/Utility.dsa');

// Define an anonymous function;
// serves as our main loop,
// limits the scope of variables
(function(){
	
	// Get the asset manager
	var oAssetMgr = App.getAssetMgr();
	// If the manager was not found
	if( !oAssetMgr ){
		// We are done...
		return;
	}
	
	// Get the top level asset container for products
	var oProductsTop = oAssetMgr.getProducts();

	// If we do not have the products container
	if( !oProductsTop ){
		// We are done...
		return;
	}
	
	// Define a variable for whether or not
	// we only want installed products
	var bInstalled = true;
	
	// Print the container name
	print( bInstalled ? "Installed" : "All", oProductsTop.getContainerName(), ":" );
	
	// Declare working variables
	var oIntermediate, oProduct;
    var nProducts;

	initArgMap();

	var iMaxOutputs = getMappedArg('max_outputs', 20);
	
    var sDataFile = getMappedArg('output_file', includeDir_oFILE.path() + "/sample.out");
    var oDataFile = new DzFile(sDataFile);
    if( !oDataFile.open( DzFile.Truncate | DzFile.WriteOnly ) ){
		print ('XIRSB: Failed to open output file: ' + sDataFile);
		return;
    }


    var oContainerObject = {}
	var oCounter = 0;
    
    // Get the number of intermediate containers; alpha-numeric sorting
    var nIntermediates = oProductsTop.getNumChildContainers();
    // Iterate over all intermediate containers
    for( var i = 0; i < nIntermediates; i += 1 ){
		// Get the 'current' intermediate container
		oIntermediate = oProductsTop.getChildContainer( i );
		// Print the container name
		//oDataFile.writeLine ("+++++", oIntermediate.getContainerName(), "+++++" );

		oContainerObject[oIntermediate.getContainerName()] = {}
		
		// Get the number of product containers within the intermediate
		nProducts = oIntermediate.getNumChildContainers();
		// Iterate over all product containers
		for( var j = 0; j < nProducts; j += 1 ){
			// Get the 'current' product container
			oProduct = oIntermediate.getChildContainer( j );
			// If we only care about installed products,
			// and the 'current' one is not
			if( bInstalled && !oProduct.isInstalled ){
				// Next!!
				continue;
			}

			// // Print information about the product
			// var objectData = {
			// 'title': oProduct.title,
			// 'store': oProduct.store,
			// 'guid': oProduct.guid,
			// 'id': oProduct.id,
			// 'iconpath': oProduct.iconPath,
			// 'artists': oProduct.artistNames,
			// 'url': oProduct.url,
			// "dateLastUpdated": oProduct.dateLastUpdated,
			// "datePurchased": oProduct.datePurchased,
			// "dateInstalled": oProduct.dateInstalled,
			// "dateReleased": oProduct.dateReleased
			// }
			// oContainerObject[oIntermediate.getContainerName()][oProduct.token] = oProduct; //objectData;

			//oDataFile.writeLine(JSON.stringify(oProduct));
			
			oDataFile.writeLine(
				oProduct.title
					+ "|"
					+ oProduct.store
					+ "| "
					+ oProduct.token
					+ "| "
					+ oProduct.guid
					+ "| "
					+ oProduct.id
			 )

			oCounter = oCounter+1;
			if ((iMaxOutputs > 0) && (oCounter > iMaxOutputs)) {
				return;
			}
		}		
	}

    //oDataFile.writeUtf8(JSON.stringify(oContainerObject));

	//return JSON.stringify(oContainerObject);

// Finalize the function and invoke
})();
